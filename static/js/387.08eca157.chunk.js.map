{"version":3,"file":"static/js/387.08eca157.chunk.js","mappings":"8QAEaA,EAAcC,EAAAA,EAAAA,GAAH,8DAMXC,EAAaD,EAAAA,EAAAA,GAAH,6IAQVE,EAAUF,EAAAA,EAAAA,EAAH,2IAQPG,EAAOH,EAAAA,EAAAA,KAAH,2I,SCoBjB,EAvCgB,WACd,OAAwCI,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,8GAEYC,EAAAA,EAAAA,IAAgBJ,GAF5B,OAEJK,EAFI,OAGVN,EAAgBM,EAAQC,SACxBC,QAAQC,IAAIH,EAAQC,SAJV,gDAMVC,QAAQC,IAAR,MANU,yDAAH,qDAUXL,GACD,GAAE,CAACH,KAGF,8BAC2B,IAAxBF,EAAaW,QACZ,SAACd,EAAD,UAAS,wDAET,SAACH,EAAD,UACGM,EAAaY,KAAI,SAAAC,GAAM,OACtB,2BACE,UAACjB,EAAD,WAAY,YACF,UAACE,EAAD,WAAM,IAAEe,EAAOC,cAGzB,SAACjB,EAAD,UAAUgB,EAAOE,YALVF,EAAOG,GADM,OAajC,C,mMCxCKC,EAAW,+BACXC,EAAU,mCAGT,SAAeC,IAAtB,+B,aAAO,O,oBAAA,yGAA8BC,EAA9B,+BAAqC,EACpCC,EADD,UACUJ,EADV,qCAC+CC,EAD/C,iBAC+DE,GAD/D,SAEQE,EAAAA,EAAAA,IACND,GACJE,MAAK,SAAAC,GACJ,OAAOA,EAASC,IACjB,IACAC,OAAM,SAAAC,GAAK,OAAIlB,QAAQC,IAAIiB,EAAhB,IAPT,2GAWA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA8BC,GAA9B,8EACCR,EADD,UACUJ,EADV,iCAC2CC,EAD3C,kBAC4DW,GAD5D,SAEQP,EAAAA,EAAAA,IACND,GACJE,MAAK,SAAAC,GACJ,OAAOA,EAASC,IACjB,IACAC,OAAM,SAAAC,GAAK,OAAIlB,QAAQC,IAAIiB,EAAhB,IAPT,0GAWA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAA4BC,GAA5B,8EACCV,EADD,UACUJ,EADV,kBAC4Bc,EAD5B,oBACgDb,GADhD,SAEQI,EAAAA,EAAAA,IACND,GACJE,MAAK,SAAAC,GACJ,OAAOA,EAASC,IACjB,IACAC,OAAM,SAAAC,GAAK,OAAIlB,QAAQC,IAAIiB,EAAhB,IAPT,0GAWA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAA4BD,GAA5B,8EACCV,EADD,UACUJ,EADV,kBAC4Bc,EAD5B,4BACwDb,GADxD,SAEQI,EAAAA,EAAAA,IACND,GACJE,MAAK,SAAAC,GACJ,OAAOA,EAASC,IACjB,IACAC,OAAM,SAAAC,GAAK,OAAIlB,QAAQC,IAAIiB,EAAhB,IAPT,0GAWA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAA+ByB,GAA/B,8EACCV,EADD,UACUJ,EADV,kBAC4Bc,EAD5B,4BACwDb,GADxD,SAEQI,EAAAA,EAAAA,IACND,GACJE,MAAK,SAAAC,GACJ,OAAOA,EAASC,IACjB,IACAC,OAAM,SAAAC,GAAK,OAAIlB,QAAQC,IAAIiB,EAAhB,IAPT,0G","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/servise/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  padding: 0;\n\n  list-style: none;\n`;\n\nexport const AuthorName = styled.h2`\n  font-family: sans-serif;\n  color: darkslategray;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n\nexport const Content = styled.p`\n  font-family: sans-serif;\n  color: darkslategray;\n  margin-top: 0;\n  margin-bottom: 10px;\n  font-size: 16px;\n`;\n\nexport const Span = styled.span`\n  font-family: sans-serif;\n  color: darkslategray;\n  margin-top: 0;\n  margin-bottom: 10px;\n  font-size: 16px;\n`;\n","import { getMovieReviews } from 'components/servise/Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ListReviews, Content, AuthorName, Span } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const reviews = await getMovieReviews(movieId);\n        setMovieReviews(reviews.results);\n        console.log(reviews.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      {movieReviews.length === 0 ? (\n        <Content>Sorry, we didn't find any reviews about this movie</Content>\n      ) : (\n        <ListReviews>\n          {movieReviews.map(review => (\n            <li key={review.id}>\n              <AuthorName>\n                Author: <Span> {review.author}</Span>\n              </AuthorName>\n\n              <Content>{review.content}</Content>\n            </li>\n          ))}\n        </ListReviews>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst MAIN_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '048dfb7517a31fb5a77ea118ba208738';\n\n// Отримує параметр поточної сторінки та повертає промікс фільмів що були в тренді протягом дня\nexport async function getDayTrending(page = 1) {\n  const url = `${MAIN_URL}/trending/all/day?api_key=${API_KEY}&page=${page}`;\n  return await axios\n    .get(url)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => console.log(error));\n}\n\n// Робить пошук поточного фільму\nexport async function getSearchMovie(query) {\n  const url = `${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n  return await axios\n    .get(url)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => console.log(error));\n}\n\n// Отримує параметр поточного фільму\nexport async function getMovieInfo(movie_id) {\n  const url = `${MAIN_URL}/movie/${movie_id}?api_key=${API_KEY}`;\n  return await axios\n    .get(url)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => console.log(error));\n}\n\n// Отримує актерський состав фільму\nexport async function getMovieCast(movie_id) {\n  const url = `${MAIN_URL}/movie/${movie_id}/credits?api_key=${API_KEY}`;\n  return await axios\n    .get(url)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => console.log(error));\n}\n\n// Отримує актерський состав фільму\nexport async function getMovieReviews(movie_id) {\n  const url = `${MAIN_URL}/movie/${movie_id}/reviews?api_key=${API_KEY}`;\n  return await axios\n    .get(url)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => console.log(error));\n}\n"],"names":["ListReviews","styled","AuthorName","Content","Span","useState","movieReviews","setMovieReviews","movieId","useParams","useEffect","fetch","getMovieReviews","reviews","results","console","log","length","map","review","author","content","id","MAIN_URL","API_KEY","getDayTrending","page","url","axios","then","response","data","catch","error","getSearchMovie","query","getMovieInfo","movie_id","getMovieCast"],"sourceRoot":""}